name: 'Autocomment-atime-results'
author: 'Anirban Chetia'
description: 'Autocomment atime-based performance regression analysis on PRs'
branding:
  icon: 'message-square'
  color: 'gray-dark'

runs:
  using: "composite"
  steps:
    - name: Start timer
      run: echo "START_SETUP_TIME=$(date +%s)" >> $GITHUB_ENV
      shell: bash
      
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Safe directory exception
      run: |
        git config --global --add safe.directory '*'
      shell: bash

    # To ensure local branch references exist and can be found when using git2r::revparse_single: (for more information, please check https://github.com/Anirban166/Autocomment-atime-results/issues/33#issuecomment-2038431272 and the comments below that)
    - name: Retrieve branch references
      run: |
        # Fetch PR head directly into a local branch using GitHub's pull request refs
        git fetch origin pull/${{ github.event.pull_request.number }}/head:${{ github.head_ref }}
        # Ensure base ref is also available locally and switch to head branch
        git switch "${ github.base_ref }"
        git switch "${{ github.head_ref }}"
      shell: bash

    - name: R Setup
      uses: r-lib/actions/setup-r@v2
      with:
        use-public-rspm: true 

    - name: Get R library path
      run: |
        echo "R_LIB_PATH=$(Rscript -e 'cat(.libPaths()[1])')" >> $GITHUB_ENV
      shell: bash

    - name: Download R library cache
      id: download-r-lib
      uses: dawidd6/action-download-artifact@v10 
      with:
        name: r-lib-cache-${{ hashFiles('DESCRIPTION') }}
        path: ${{ env.R_LIB_PATH }}
        if_no_artifact_found: ignore

    - name: Check for R library cache hit
      id: rlib-hit
      run: |
        if [ -n "$(ls -A '${{ env.R_LIB_PATH }}' 2>/dev/null)" ]; then
          echo "cache-hit=true" >> $GITHUB_ENV
        else
          echo "cache-hit=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Install R packages (DESCRIPTION-specified deps)
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        cache: false
        extra-packages: |
          atime
          ggplot2
          directlabels

    - name: Download libgit2 artifact from main
      id: download-libgit2
      uses: dawidd6/action-download-artifact@v10
      with:
        name: libgit2-cache
        path: /tmp
        if_no_artifact_found: ignore

    - name: Check for libgit2 cache hit
      id: libgit2-hit
      run: |
        if [ -f /tmp/libgit2-cache.tar.gz ]; then
          echo "libgit2-cache-hit=true" >> $GITHUB_ENV
        else
          echo "libgit2-cache-hit=false" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Restore libgit2 from artifact
      if: env.libgit2-cache-hit == 'true'
      run: |
        echo "Restoring libgit2 from artifact..."
        sudo tar -xzf /tmp/libgit2-cache.tar.gz -C /
        sudo ldconfig
      shell: bash

    - name: Install libgit2
      if: env.libgit2-cache-hit == 'false'
      run: |
        sudo apt-get update -y && sudo apt-get install -y cmake libssl-dev
        git clone --branch v1.6.4 --depth 1 https://github.com/libgit2/libgit2.git
        cd libgit2 && mkdir build && cd build
        cmake .. -DCMAKE_INSTALL_PREFIX=/usr
        make && sudo make install
        cd ../..
        echo "Creating libgit2 cache tarball..."
        # Ensure target directory for tarball exists
        mkdir -p /tmp
        # Create cache tarball with all installed libgit2 files
        sudo tar -czf /tmp/libgit2-cache.tar.gz \
          /usr/lib/x86_64-linux-gnu/libgit2* \
          /usr/lib/x86_64-linux-gnu/pkgconfig/libgit2.pc \
          /usr/include/git2* \
          /usr/bin/git2 2>/dev/null || true # Ignore errors if some paths don't exist
        sudo ldconfig # Refresh linker cache
      shell: bash

    - name: Run atime tests
      run: |
        mkdir -p ~/.R
        echo "CFLAGS = -std=gnu99" >> ~/.R/Makevars
        echo "options(repos = c(CRAN = 'https://cloud.r-project.org'))" >> .Rprofile
        echo "END_SETUP_START_TESTS_TIME=$(date +%s)" >> $GITHUB_ENV
        Rscript -e 'atime::atime_pkg(Sys.getenv("GITHUB_WORKSPACE"), tests.dir = ".ci");'
        echo "END_TESTS_TIME=$(date +%s)" >> $GITHUB_ENV
      shell: bash

    - name: Save timing data
      run: |
        mkdir -p timing
        echo "$START_SETUP_TIME" > timing/start_setup.txt
        echo "$END_SETUP_START_TESTS_TIME" > timing/end_setup.txt
        echo "$END_TESTS_TIME" > timing/end_tests.txt
      shell: bash

    - name: Upload test results and timing
      uses: actions/upload-artifact@v4
      with:
        name: atime-results
        path: |
          .ci/atime/
          timing/

    - name: Upload libgit2 artifact
      if: env.libgit2-cache-hit == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: libgit2-cache
        path: /tmp/libgit2-cache.tar.gz

    - name: Upload R library artifact
      if: env.cache-hit == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: r-lib-cache-${{ hashFiles('DESCRIPTION') }}
        path: ${{ env.R_LIB_PATH }}

    - name: Push generated plot along with relevant information on the PR thread as a GH-bot comment
      run: |
        R_SETUP_DURATION=$((END_SETUP_START_TESTS_TIME - START_SETUP_TIME))
        VERSION_SETUP_DURATION=$(cut -d '.' -f 1 ./.ci/atime/install_seconds.txt)
        ATIME_TESTS_DURATION=$((END_TESTS_TIME - END_SETUP_START_TESTS_TIME - VERSION_SETUP_DURATION))

        formatTime() {
            local totalSeconds=$1
            if [ $totalSeconds -lt 0 ]; then
                echo "Time calculation error: negative duration"
                return
            fi
            if [ $totalSeconds -lt 60 ]; then
                echo "${totalSeconds} seconds"
            else
                local minutes=$((totalSeconds / 60))
                local seconds=$((totalSeconds % 60))
                echo "${minutes} minutes and ${seconds} seconds"
            fi
        }
        
        # Comment contents:
        cat .ci/atime/HEAD_issues.md >> report.md
        echo -e "\n[![Comparison Plot](./.ci/atime/tests_preview_facet.png)](./.ci/atime/tests_all_facet.png)" >> report.md
        echo -e "\nGenerated via commit ${{ github.event.pull_request.head.sha }}" >> report.md
        echo -e "\nDownload link for the artifact containing the test results: [â†“ atime-results.zip](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.artifact-upload-step.outputs.artifact-id }})" >> report.md
        echo -e "\n| Task | Duration |" >> report.md
        echo -e "|---|---|" >> report.md
        echo -e "| R setup and installing dependencies   | $(formatTime $R_SETUP_DURATION)       |" >> report.md
        echo -e "| Installing different package versions | $(formatTime $VERSION_SETUP_DURATION) |" >> report.md
        echo -e "| Running and plotting the test cases   | $(formatTime $ATIME_TESTS_DURATION)   |" >> report.md
        cml comment update report.md
      shell: bash
